{"version":3,"sources":["App.js","images/superman.png","images/bmw.png","images/aave.png","images/instagram.png","images/audi.png","images/batman.png","components/GameInfo/GameInfo.js","components/Card/Card.js","index.js"],"names":["interval","firstCardIndex","firstCard","secondCardIndex","secondCard","GameInfo","noOfMoves","minutes","seconds","className","Card","logo","onCardClick","flipClass","onClick","src","alt","flipped","lockCard","pairs","App","runTimer","setInterval","setState","state","countMoves","moves","endGame","setTimeout","clearInterval","alert","baseState","disableCards","newActive","eventFlip","unflipCards","active","checkCard","logos","toggleState","index","cardFlip","logoA","logoB","logoC","logoD","logoE","logoF","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","this","map","element","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.131c46e6.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport logoA from \"./images/superman.png\";\r\nimport logoB from \"./images/bmw.png\";\r\nimport logoC from \"./images/aave.png\";\r\nimport logoD from \"./images/instagram.png\";\r\nimport logoE from \"./images/audi.png\";\r\nimport logoF from \"./images/batman.png\";\r\n\r\nimport GameInfo from \"./components/GameInfo/GameInfo\";\r\nimport Card from \"./components/Card/Card\";\r\nimport { Component } from \"react\";\r\n\r\nvar interval;\r\nvar firstCardIndex, firstCard, secondCardIndex, secondCard;\r\nvar flipped = false;\r\nvar lockCard = false;\r\nvar pairs = 0;\r\n\r\n//Fisher-Yates (aka Knuth) shuffle algorithm\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length,\r\n        temporaryValue,\r\n        randomIndex;\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n}\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            logos: [logoA, logoB, logoC, logoD, logoE, logoF, logoA, logoB, logoC, logoD, logoE, logoF],\r\n            active: [false, false, false, false, false, false, false, false, false, false, false, false],\r\n            eventFlip: [true, true, true, true, true, true, true, true, true, true, true, true],\r\n            minutes: 0,\r\n            seconds: 0,\r\n            moves: 0,\r\n        };\r\n        this.baseState = this.state;\r\n        shuffle(this.state.logos);\r\n    }\r\n\r\n    runTimer = () => {\r\n        interval = setInterval(() => {\r\n            this.setState({ seconds: this.state.seconds + 1 });\r\n            if (this.state.seconds === 60) {\r\n                this.setState({ minutes: this.state.minutes + 1 });\r\n                this.setState({ seconds: 0 });\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    countMoves = () => {\r\n        this.setState(\r\n            {\r\n                moves: this.state.moves + 1,\r\n            },\r\n            () => {\r\n                if (this.state.moves === 1) this.runTimer();\r\n            }\r\n        );\r\n    };\r\n\r\n    endGame = () => {\r\n        setTimeout(() => {\r\n            clearInterval(interval);\r\n            alert(`You won in ${this.state.moves} moves!`);\r\n            this.setState(this.baseState);\r\n            pairs = 0;\r\n        }, 300);\r\n    };\r\n\r\n    disableCards = (firstCardIndex, secondCardIndex) => {\r\n        const newActive = [...this.state.eventFlip]; // Clone the card event array\r\n        newActive[firstCardIndex] = !newActive[firstCardIndex]; // Set to false (disable)\r\n        newActive[secondCardIndex] = !newActive[secondCardIndex]; // Set to false (disable)\r\n        this.setState(\r\n            {\r\n                eventFlip: newActive, // Set the new array to state\r\n            },\r\n            () => {\r\n                pairs++;\r\n                if (pairs === 6) this.endGame();\r\n                [flipped, lockCard, firstCardIndex, secondCardIndex] = [false, false, null, null];\r\n            }\r\n        );\r\n    };\r\n\r\n    unflipCards = (firstCardIndex, secondCardIndex) => {\r\n        const newActive = [...this.state.active]; // Clone the array\r\n        newActive[secondCardIndex] = !newActive[secondCardIndex]; // Invert true or false\r\n        newActive[firstCardIndex] = !newActive[firstCardIndex]; // Invert true or false\r\n        setTimeout(() => {\r\n            this.setState(\r\n                {\r\n                    active: newActive, // Set the new array to state\r\n                },\r\n                () => {\r\n                    [flipped, lockCard, firstCardIndex, secondCardIndex] = [false, false, null, null];\r\n                }\r\n            );\r\n        }, 500);\r\n    };\r\n\r\n    checkCard = (firstCardIndex, firstCard, secondCardIndex, secondCard) => {\r\n        var isTrue = firstCard.state.logos[firstCardIndex] === secondCard.state.logos[secondCardIndex];\r\n        isTrue ? this.disableCards(firstCardIndex, secondCardIndex) : this.unflipCards(firstCardIndex, secondCardIndex);\r\n    };\r\n\r\n    toggleState = (index) => {\r\n        if (this.state.eventFlip[index]) {\r\n            // check to flip only enabled\r\n            const newActive = [...this.state.active]; // Clone the Active cards array\r\n            newActive[index] = !newActive[index]; // Invert true or false\r\n            this.setState(\r\n                {\r\n                    active: newActive, // Set the new array to state\r\n                },\r\n                () => {\r\n                    this.countMoves();\r\n                    if (!flipped) {\r\n                        firstCardIndex = index;\r\n                        firstCard = this;\r\n                        flipped = true;\r\n                        return;\r\n                    }\r\n                    secondCard = this;\r\n                    secondCardIndex = index;\r\n                    lockCard = true;\r\n                    this.checkCard(firstCardIndex, firstCard, secondCardIndex, secondCard);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    cardFlip = (index) => {\r\n        if (lockCard) return;\r\n        if (index === firstCardIndex) return;\r\n        this.toggleState(index);\r\n    };\r\n\r\n    render() {\r\n        const { moves, minutes, seconds, logos, active } = this.state;\r\n        return (\r\n            <div className=\"App vh-100 flex flex-column justify-center items-center\">\r\n                <GameInfo noOfMoves={moves} minutes={minutes} seconds={seconds} />\r\n                <div className=\"Game\">\r\n                    {logos.map((element, index) => {\r\n                        return (\r\n                            <Card\r\n                                key={index}\r\n                                flipClass={active[index] ? \"flip\" : null}\r\n                                logo={element}\r\n                                onCardClick={() => this.cardFlip(index)}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","export default __webpack_public_path__ + \"static/media/superman.fd077ab0.png\";","export default __webpack_public_path__ + \"static/media/bmw.c5ad9d85.png\";","export default __webpack_public_path__ + \"static/media/aave.e148933d.png\";","export default __webpack_public_path__ + \"static/media/instagram.130e82b6.png\";","export default __webpack_public_path__ + \"static/media/audi.b7896402.png\";","export default __webpack_public_path__ + \"static/media/batman.367f008f.png\";","import React from \"react\";\r\n\r\nconst GameInfo = ({ noOfMoves, minutes, seconds }) => {\r\n  return (\r\n    <div className=\"flex flex-row justify-around w-50 mb2 pa2\">\r\n      <div>\r\n        Moves: {noOfMoves}\r\n      </div>\r\n      <div>\r\n        Time: {minutes}:{seconds}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameInfo;\r\n","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({ logo, onCardClick, flipClass }) => {\r\n  return (\r\n    <div className={\"card \" + flipClass} onClick={onCardClick}>\r\n      <img src={logo} alt=\"logo\" className=\"back\" />\r\n      <div className=\"front\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}